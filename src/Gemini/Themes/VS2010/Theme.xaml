<!--
Ported from Edi: https://edi.codeplex.com
	
Original license:
	
Copyright (c) 2013 Chandramouleswaran Ravichandran

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.	
-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
	xmlns:local="clr-namespace:Gemini.Framework.Controls">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="Brushes.xaml" />
		<ResourceDictionary Source="StatusBar.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<Style TargetType="{x:Type ContextMenu}">
		<!--  BasedOn="{StaticResource {x:Type ContextMenu}} -->
		<Setter Property="Background" Value="{StaticResource ContextMenuBackground}" />
		<Setter Property="BorderBrush" Value="{StaticResource ContextMenuBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
	</Style>

	<Style TargetType="{x:Type ToolBar}">
		<!-- BasedOn="{StaticResource {x:Type ToolBar}}" -->
		<Setter Property="Background" Value="{StaticResource ToolBarBackground}" />
	</Style>
	<Style TargetType="{x:Type local:ToolBar}">
		<!-- BasedOn="{StaticResource {x:Type ToolBar}}" -->
		<Setter Property="Background" Value="{StaticResource ToolBarBackground}" />
	</Style>

	<Style TargetType="{x:Type ToolBarTray}">
		<!-- BasedOn="{StaticResource {x:Type ToolBarTray}}" -->
		<Setter Property="Background" Value="{StaticResource ToolBarTrayBackground}" />
	</Style>

	<Style TargetType="{x:Type Menu}">
		<!--  BasedOn="{StaticResource {x:Type Menu}" -->
		<Setter Property="Background" Value="{StaticResource MenuBackground}" />
	</Style>
	<Style TargetType="{x:Type local:Menu}">
		<!--  BasedOn="{StaticResource {x:Type Menu}" -->
		<Setter Property="Background" Value="{StaticResource MenuBackground}" />
	</Style>

	<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
		<Setter Property="Height" Value="1"/>
		<Setter Property="Margin" Value="0,4,0,4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border BorderBrush="{StaticResource SeperatorBorderBrush}" BorderThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
		<Border Name="Border" >
			<Grid>
				<ContentPresenter Margin="6,3,6,3"
                          ContentSource="Header"
                          RecognizesAccessKey="True" />
				<Popup Name="Popup"
              Placement="Bottom"
              IsOpen="{TemplateBinding IsSubmenuOpen}"
              AllowsTransparency="True" 
              Focusable="False"
              PopupAnimation="Fade">
					<Border Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  Background="{StaticResource ContextMenuBackground}"
                  BorderBrush="{StaticResource SubMenuBorderBrush}"
                  BorderThickness="1" >
						<StackPanel IsItemsHost="True" 
                        KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
				<Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightMenuItemGradient}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource MenuItemForegroundDisabled}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="True">
				<Setter Property="Foreground" Value="{StaticResource MenuItemForegroundEnabled}"/>
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.IsOpen" Value="True">
				<Setter TargetName="Border" Property="Background" Value="#d0d7e2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style TargetType="{x:Type Separator}">
		<!--  BasedOn="{StaticResource {x:Type Separator}}" -->
		<Setter Property="Foreground" Value="{StaticResource SeperatorForeground}" />
	</Style>

</ResourceDictionary>